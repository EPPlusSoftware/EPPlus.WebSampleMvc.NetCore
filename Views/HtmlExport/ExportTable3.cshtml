@model EPPlus.WebSampleMvc.NetCore.Models.HtmlExport.ExportTable3Model
@{
    ViewData["Title"] = "Html export";
}
<script type="text/javascript" src=https://www.gstatic.com/charts/loader.js></script>
<style type="text/css">
    @Html.Raw(Model.Css)
</style>
<div class="row">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/HtmlExport">Html export</a></li>
                <li class="breadcrumb-item active" aria-current="page">Export currency table with line chart</li>
            </ol>
        </nav>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <div class="text-center">
            <h1 class="display-4">Html export</h1>
            <p>Html and CSS export of the built in tables/table styles in Excel</p>
        </div>
        <p>This table contains over 10 000 currency rates and is connected to a google charts line chart. The rates are imported to EPPlus from a .csv file using the LoadFromText function and exported to css/html.</p>
    </div>
</div>
<div class="row">
    <div class="col">
        <div id="currency-chart" class="text-center border border-secondary p-3 mb-4 rounded shadow" style="height:450px">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading chart...</span>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col">
        @Html.Raw(Model.Html);
    </div>
</div>
<script type="text/javascript">

    // Load the Visualization API and the corechart package.
    google.charts.load('current', { 'packages': ['corechart'] });

    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(drawCharts);


    function getDataFromTable(indexes) {
        // Create the data table.
        var data = new google.visualization.DataTable();
        var dataTypes = [];
        var n = 0;

        // read data types from the thead and define columns in the google.visualization.DataTable
        $(".epplus-table thead tr th").each(function (i, elem) {
            if (indexes.includes(i)) {
                var dt = $(elem).data("datatype");
                dataTypes[n++] = dt;
                data.addColumn(dt, elem.innerHTML);
            }
        });

        var startDate = new Date();
        console.log("start: " + new Date().getTime());
        // read the data from the tbody and insert it into the table
        let rows = [];
        $(".epplus-table tbody tr").each(function (i, tableRow) {
            var row = [];
            var colIx = 0;
            var nLogs = 0;
            indexes.forEach(ix => {
                let dataType = dataTypes[colIx++];
                var cell = $(tableRow).children().eq(ix);
                if (dataType == "string") {
                    row.push($(cell).html());
                }
                else if (dataType == "number") {
                    row.push(parseFloat($(cell).data("value")));
                }
                else if (dataType == "datetime") {
                    if (nLogs++ < 10) {
                    }
                    row.push(new Date(parseFloat($(cell).data("value"))));
                }
            });
            rows.push(row);
        });
        console.log("end: " + (new Date().getTime() - startDate.getTime()));
        data.addRows(rows);
        return data;
    }

    // Callback that creates and populates a data table,
    // instantiates the pie chart, passes in the data and
    // draws it.
    function drawCharts() {
        var dt = getDataFromTable([0, 1, 2, 3, 4]);
        drawLineChart(dt, "USD rate");
    }

    function drawLineChart(data, title) {
        var options = {
            'title': title,
            'width': 1000,
            'height': 400,
            'is3D': true
        };
        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.LineChart(document.getElementById('currency-chart'));
        chart.draw(data, options);
    }
</script>