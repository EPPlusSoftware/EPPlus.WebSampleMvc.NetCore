@model EPPlus.WebSampleMvc.NetCore.Models.HtmlExport.ExportTable2Model
@{
    ViewData["Title"] = "Html export";
}
<script type="text/javascript" src=https://www.gstatic.com/charts/loader.js></script>
<style type="text/css">
    @Html.Raw(Model.Css)
</style>
<div class="row">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/HtmlExport">Html export</a></li>
                <li class="breadcrumb-item active" aria-current="page">Export table with charts</li>
            </ol>
        </nav>
    </div>
</div>
<div class="row">
    <div class="col text-center">
        <h4>Html export - connect table data with external components</h4>
    </div>
</div>
<div class="row my-2">
    <div class="col bg-light rounded">
        <div class="row">
            <div class="col-6">
                <a href="/HtmlExport/ExportTable1">&laquo; Previous sample</a>
            </div>
            <div class="col-6 text-right">
                <a href="/HtmlExport/ExportTable3">Next sample &raquo;</a>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <div class="p-1">
            <p>In this sample we have connected the exported table to Google charts with javascript. The table data is imported to EPPlus via the <a href="https://github.com/EPPlusSoftware/EPPlus/wiki/LoadFromDataTable" target="_blank">LoadFromDataTable</a> function and the Density column is a calculated table column. The total row of the table is calculated via EPPlus built in Total row functions.</p>
            <p>The table has addtional classes from Bootstrap: table and table-sm</p>
        </div>
    </div>
</div>
<div class="row">
    <div class="col mb-3">
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @ViewData["TableStyle"]
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Dark1">Dark 1</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Dark2">Dark 2</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Dark3">Dark 3</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Dark4">Dark 4</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Dark5">Dark 5</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Dark6">Dark 6</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Medium1">Medium 1</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Medium2">Medium 2</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Medium3">Medium 3</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Medium4">Medium 4</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Medium5">Medium 5</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Light1">Light 1</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Light2">Light 2</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Light3">Light 3</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Light4">Light 4</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Light5">Light 5</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Light6">Light 6</a>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-12 col-md-5">
        @Html.Raw(Model.Html)
    </div>
    <div class="col-sm-12 col-md-6">
        <div class="row">
            <div class="col border border-secondary rounded shadow p-2">
                <div id="geo-chart" style="height:300px"></div>
            </div>
        </div>
        <div class="row">
            <div class="col border border-secondary rounded shadow p-2 mt-2">
                <div id="pie-chart" style="height:300px"></div>
            </div>
        </div>
        <div class="row">
            <div class="col border border-secondary rounded shadow p-2 mt-2">
                <div id="bar-chart" style="height:300px"></div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">

    // Load the Visualization API and the corechart package.
    google.charts.load('current', { 'packages': ['corechart', 'geochart'] });

    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(drawCharts);


    function getDataFromTable(indexes) {
        // Create the data table.
        var data = new google.visualization.DataTable();
        var dataTypes = [];
        var n = 0;

        // read data types from the thead and define columns in the google.visualization.DataTable
        $(".epplus-table thead tr th").each(function (i, elem) {
            if (indexes.includes(i)) {
                var dt = $(elem).data("datatype");
                dataTypes[n++] = dt;
                data.addColumn(dt, elem.innerHTML);
            }
        });

        // read the data from the tbody and insert it into the table
        let rows = [];
        $(".epplus-table tbody tr").each(function (i, tableRow) {
            var row = [];
            var colIx = 0;
            indexes.forEach(ix => {
                let dataType = dataTypes[colIx++];
                var cell = $(tableRow).children().eq(ix);
                if (dataType == "string") {
                    row.push($(cell).html());
                }
                else if (dataType == "number") {
                    row.push(parseFloat($(cell).data("value")));
                }
                else if (dataType == "datetime") {
                    row.push(new Date(parseFloat($(cell).data("value"))));
                }
            });
            console.log(row);
            rows.push(row);
        });
        data.addRows(rows);
        return data;
    }

    // Callback that creates and populates a data table,
    // instantiates the pie chart, passes in the data and
    // draws it.
    function drawCharts() {
        var dt = getDataFromTable([0, 1, 3]);
        drawGeoChart(dt);
        var dt2 = getDataFromTable([0, 1]);
        drawPieChart(dt2, "Population in Europe");
        var dt3 = getDataFromTable([0, 3]);
        drawBarChart(dt3, "Population density in Europe");
    }

    function drawGeoChart(data) {
        
        // Set chart options
        var options = {
            'title': 'Population in some countries',
            'width': 500,
            'height': 300,
            'is3D': true,
            'region': 150
        };
        var chart3 = new google.visualization.GeoChart(document.getElementById('geo-chart'));
        chart3.draw(data, options);
    }

    function drawPieChart(data, title){
        var options = {
            'title': title,
            'width': 500,
            'height': 300,
            'is3D': true
        };
        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.PieChart(document.getElementById('pie-chart'));
        chart.draw(data, options);
    }

    function drawBubbleChart(data) {
        var options = {
            'title': 'Population in some countries',
            'width': 500,
            'height': 300,
            'is3D': true
        };
        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.BubbleChart(document.getElementById('pie-chart'));
        chart.draw(data, options);
    }

    function drawBarChart(data, title){
        var options = {
            'title': title,
            'width': 500,
            'height': 300,
            'is3D': true
        };
        var chart2 = new google.visualization.BarChart(document.getElementById('bar-chart'));
        chart2.draw(data, options);
    }
</script>

